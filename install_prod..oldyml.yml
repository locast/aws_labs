- hosts: all
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
    - name: "update and upgrade"
      apt: 
        update_cache: yes
        upgrade: dist

- hosts: [manager, worker, dtr]
  name: "install docker Entreprise"
  remote_user: root
  become: yes
  become_method: sudo
  vars_files:
    - ansible_vars.yml
  tasks:
    - name: Update + install packages
      apt:
        update_cache: yes
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
    - name: Add official GPG key
      shell: curl -fsSL {{ docker_ee_url }}/ubuntu/gpg | sudo apt-key add -
    - name: Set stable repository
      shell: add-apt-repository "deb [arch=$(dpkg --print-architecture)] {{ docker_ee_url }}/ubuntu {{ ansible_distribution_release }} stable-{{docker_ee_version}}"
    - name: Install Docker EE version {{ docker_ee_version }}
      apt: 
        update_cache: yes
        name: 
          - docker-ee
          - docker-ee-cli
          - containerd.io
        state: present
    - name: Add user to Docker group
      shell: usermod -aG docker ubuntu
    - name: "enable docker service"
      systemd: 
        name: docker 
        state: restarted
        enabled: yes

- hosts: manager1
  name: "Init swarm and get tokens"
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
    - name: "create primary swarm manager"
      shell: docker swarm init 
    - name: "get docker swarm manager token"
      shell: docker swarm join-token -q manager
      register: manager_token
    - name: "get docker swarm worker token"
      shell: docker swarm join-token -q worker
      register: worker_token

- hosts: manager
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
   - name: "join swarm as a manager"
     shell: "docker swarm join --token {{ hostvars['manager1']['manager_token']['stdout'] }} {{ hostvars['manager1']['ansible_eth0']['ipv4']['address'] }}:2377"
     when: inventory_hostname != "manager1" 
     retries: 3
     delay: 20
     
- hosts: [worker,dtr]
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
    - name: "join as a worker"
      shell: "docker swarm join --token {{ hostvars['manager1']['worker_token']['stdout'] }} {{ hostvars['manager1']['ansible_eth0']['ipv4']['address'] }}:2377"
      retries: 3
      delay: 20

- hosts: manager1
  remote_user: root
  become: yes
  become_method: sudo
  vars_files:
    - ansible_vars.yml
  tasks:
    - name: "pull ucp"
      shell: "docker image pull docker/ucp:{{ ucp_version }}"
    - name: "Copy subscription."
      copy:
        src: "{{ docker_lic_path }}/{{ docker_lic_name }}"
        dest: "/tmp/"
    - name: "Install UCP (version: {{ ucp_version }})."
      shell: >
        docker run --rm --name ucp --volume /var/run/docker.sock:/var/run/docker.sock 
        --volume "/tmp/{{ docker_lic_name }}:/config/docker_subscription.lic:ro" 
        --env "UCP_ADMIN_USER={{ ucp_user }}"
        --env "UCP_ADMIN_PASSWORD={{ ucp_password }}"
        docker/ucp:{{ ucp_version }} install
        --san "{{ ansible_host }}"
      #--host-address "{{ docker_swarm_listen_address | default(ansible_default_ipv4['address']) }}"
      #--san "{{ docker_ucp_lb }}"

#### TODO  ####
docker run -it --rm \
  docker/ucp:2.6.0 join \
  --ucp-node <ucp-node-name> \
  --ucp-insecure-tls
#############

- hosts: dtr
  remote_user: root
  become: yes
  become_method: sudo
  vars_files:
    - ansible_vars.yml
  tasks:
    - name: 'install dtr primary'
      shell: >
        docker run -it --rm docker/dtr:{{ dtr_version }} install 
        --ucp-node "{{ ansible_hostname }}"
        --ucp-insecure-tls
        --ucp-url "{{ hostvars['manager1']['ansible_eth0']['ipv4']['address'] }}:443"
        --ucp-username {{ ucp_user }}
        --ucp-password {{ ucp_password }}

##### TODO ######
docker run -it --rm \
  docker/dtr:2.6.0 join \
  --ucp-node <ucp-node-name> \
  --ucp-insecure-tls
#########


- hosts: jenkins
  remote_user: root
  become: yes
  become_method: sudo
  tasks:
    - name: "update and upgrade"
      apt: 
        update_cache: yes
        upgrade: dist
    - name: Add Java repo
      apt_repository:
        validate_certs: no
        repo: 'ppa:openjdk-r/ppa'
        state: present
    - name: Import Jenkins key
      apt_key:
        state: present
        url: https://pkg.jenkins.io/debian/jenkins-ci.org.key
    - name: Add Jenkins repo
      apt_repository: 
        repo: 'deb https://pkg.jenkins.io/debian-stable binary/'
        state: present
    - name: Install Jenkins and dependencies
      apt:
        name: 
          - openjdk-8-jdk
          - openjdk-8-source
          - jenkins
        install_recommends: yes
        state: present
        update_cache: yes
      retries: 3
      delay: 20
    - name: Start & Enable Jenkins
      systemd:
        name: jenkins
        state: started
        enabled: true
    - name: Sleep for 30 seconds and continue with play
      wait_for: timeout=30
    - name: Get init password Jenkins
      shell: cat /var/lib/jenkins/secrets/initialAdminPassword
      changed_when: false
      register: result
    - name: Print init password Jenkins
      debug:
        var: result.stdout

- hosts: gitlab
  remote_user: root
  become: yes
  become_method: sudo
  vars_files:
    - ansible_vars.yml
  handlers:
    - name: Start postfix
      systemd:
        name: postfix
        state: started
        enabled: yes
    - name: Start sshd
      systemd:
        name: ssh
        state: started
        enabled: yes
    - name: Reconfigure GitLab
      command: gitlab-ctl reconfigure
    - name: Reconfigure and restart GitLab
      shell: gitlab-ctl reconfigure && gitlab-ctl restart

  tasks:
    - name: Install GitLab dependencies
      apt:
        name:
          - curl
          - openssh-server
          - ca-certificates
          - postfix
        state: present
        update_cache: yes
      notify:
        - Start sshd
        - Start postfix
    - name: Run script to check system and add repository for GitLab CE
      shell: "curl -L -s {{ gitlab_script_url }} | bash"
    - name: Install Gitlab CE
      apt:
        name: "{{ gitlab_package }}"
        state: present
        update_cache: yes
    - name: Copy GitLab configuration file
      template:
        src: "{{ gitlab_host_config_file_path }}"
        dest: "{{ gitlab_config_file_path }}"
        owner: root
        group: root
        mode: 0644
      notify: Reconfigure and restart GitLab
    #- name: Copy GitLab SSL certificates
    #  copy:
    #    src: "{{ gitlab_host_config_ssl_path }}"
    #    dest: "{{ gitlab_ssl_config_path }}"
    #  when:
    #    - gitlab_config_ssl_check.stat.isdir is defined
    #    - gitlab_config_ssl_check.stat.isdir
    #  notify: Reconfigure and restart GitLab

- hosts: elk
  remote_user: root
  become: yes
  become_method: sudo
  vars_files:
    - ansible_vars.yml
  tasks:

- hosts: ldap
  remote_user: root
  become: yes
  become_method: sudo
  vars_files:
    - ansible_vars.yml
  tasks:
    - roles:
      role: ldap